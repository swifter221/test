"use strict";

// Массивы и псевдомассивы

// Массив - это структура которая содержит элементы по порядку

const arr = [1, 2, 3, 6, 8];

// существуют методы массивов для работы с концом или началом массива

// методы которые работают с концом массива

arr.pop(); // удаление последнего элемента из массива
arr.push(10); // добавляет элемент в конец массива 

// методы shift и unshift стараются не применять так как они переиндексируют весь массив, так как элемент добавляется или удаляется из начала массива

console.log(arr);

// методы перебора элемнтов массива, но перебрать массив можно и циклом for

for (let i = 0; i < arr.length; i++) {
  console.log(arr[i]);
}

// Также можно использовать for ... of ...

for (let value of arr) {
  console.log(value);
}

// for ... of ... работает только с массиво-подобными сущностями (массивами, строками, псевдомассивами, сущности Map и Set, можно перебрать элемнты со страницы)

console.log(arr.length); // иногда на собеседованиях могут спросить: как соотносится между собой свойство length и порядковые номера элементов у массивов? Ответ: свойство length состоит из последнего индекса который есть в массиве + 1

// массивы служат чтобы хранить все элемнты строго по порядку, но это правило может случайно нарушаться

/* arr[99] = 0;
console.log(arr.length); // 100 именно поэтому length рассчитывается как последний индекс + 1
console.log(arr); // [1, 2, 3 , 6, 8, 10, <94 empty items>, 0] */

// метод foreach (позволяет гибко перебрать все элементы массива)

arr.forEach(function(item, i, arr) {
  console.log(`${i}: ${item} внутри массива ${arr}`);
});

// замена forEach - это for ... of ... , его плюсом является то, что можно использовать ключевые слова break и continue, в forEach такого нет

// у массивов есть еще несколько перебирающих методов, но они будут уже заниматься трансформацией нашего массива

// метод map может перебрать каждый элемент массива модифицирую его, возвращает новый массив

// метод filter отфильтровывает массив по тому критерию которому мы туда задаем, пример оставить только четные числа

// методы перебора map, every\some, filter, reduce модифицируют элементы, а forEach просто их перебирает !!!

//другие методы 

const str = prompt('', '');
const products = str.split(', '); // делит строку по разделителю на несколько элемнтов и записывает в массив
products.sort(); // сортирует массив в данном случае в алфавитном порядке, особенностью является что сортирует он элементы как строки
console.log(products.join('; ')); // склеивает элементы массива в одну строку через разделитель 

const arr2 = [5, 23, 16, 83, 43];
arr2.sort();
console.log(arr2); // 16 23 43 5 83 потому что сортировка элементов как строк. 1 в строке 13 меньше чем 2 в строке 23, сравнение происходит посимвольно поэтому такой странный результат

// но можно сделать и правильную сортировку

function compareNum (a, b) {
  return a - b;
}

arr2.sort(compareNum);
console.log(arr2); // 5 16 23 43 83 , так происходит так как метод sort реализует алгоритм быстрой сортировки и поэтому a - b в функции compareNum работает как надо


// псевдомассивы

// псевдомассивы будем получать когда будем работать с элемнтами страницы, по факту это такой объект структура которого совпадает со структурой массива, но при этом у псевдомассиваов не будет никаких методов